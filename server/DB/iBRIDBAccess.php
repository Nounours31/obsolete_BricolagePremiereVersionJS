<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of DBAccess
 *
 * @author PFS
 */
include_once($_SERVER['DOCUMENT_ROOT'].'NewPlouf/Dev/php/PHPClasses/API/Traces.php');
include_once($_SERVER['DOCUMENT_ROOT'].'NewPlouf/Dev/php/PHPClasses/DB/iDB.php');
abstract class iDBAccess extends iDB {
    
    function __construct() {
        parent::__construct();
        $this -> _DBName = 'InternalDBTools[DBAccess]';
        $this -> _logger -> prefix ($this -> _DBName);
    }

    function __destruct() {
        parent::__destruct();
    }

    /**
     * Connectio a la DB en MySQLi
     * @return connexion MySQL vers la DB
     */
    public function connect() {
        $User = ENVT::DBUser;
        $Password = ENVT::DBPassword;
        $BaseName= ENVT::DBBaseName;
        $Port= ENVT::DBPort;
        if (ENVT::isLOCALSERVER) {
            $Host = "127.0.0.1";
        }
        else {
            $Host = ENVT::DBHost;
        }
        $link = mysqli_connect($Host, $User, $Password, $BaseName,$Port);

        if (!$link) {
            $this -> _logger ->DebugTrace("Error: Unable to connect to MySQL.", ENVT::_FATAL);
            $this -> _logger ->DebugTrace("Debugging errno: " . mysqli_connect_errno(), ENVT::_FATAL);
            $this -> _logger ->DebugTrace("Debugging error: " . mysqli_connect_error(), ENVT::_FATAL);
            echo "Error: Unable to connect to MySQL." . PHP_EOL;
            echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
            echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
            exit;
        }
        else {
            $this -> _logger ->DebugTrace("DBAccess::Connect Connect, host information: ".mysqli_get_host_info($link), ENVT::_FATAL);
        }
        return $link;
    }

    /**
     * Close de la connexion SQL
     * @param mysqli $link
     */
    public function close(mysqli $link) {
        $link -> close();
    }

    /**
     * Envoie generique des commande de type : SELECT, SHOW, DESCRIBE or EXPLAIN queries 
     * 
     * @param String $sql la commande SQL 
     * @return Array de array array[i] = la reponse du select pour une occurence
     */
    function selectAsRest ($sql) {
       $link =  $this ->connect();
       $rc = $this->select($link, $sql);
       $this ->close($link);
       return $rc;
    }
    /**
     * Envoie generique des commande de type : SELECT, SHOW, DESCRIBE or EXPLAIN queries 
     * MAIS SANS OUVRIR LA DB --- Permet de regrouper plusiseur call
     * 
     * @param type $link lien vers la DB
     * @param type $sql la reauete SQL
     * @return Array de array array[i] = la reponse du select pour une occurence
     */
    function select ($link, $sql) {
        $this -> _logger ->DebugTrace("DBAccess::select SQL[".$sql."]", ENVT::_DEBUG);
        $ret = array();

        $result = $link -> query ($sql);
        if ($result === FALSE) {
            $this -> _logger ->DebugTrace("DBAccess::select error:".$link -> error, ENVT::_FATAL);
            return $ret;
        }
        if ($result === TRUE)
            return $ret;

        if ($result ->num_rows < 1) {
            $this -> _logger ->DebugTrace("DBAccess::select No info in DB:", ENVT::_DEBUG);
            return $ret;
        }

        while ($row = $result->fetch_assoc()) {
            $uneligne = array();
            foreach ($row as $key => $value) {
                $uneligne[$key] = $row[$key];
            }
            $this -> _logger ->DebugTraceTableau("DBAccess::select uneligne:", $uneligne, ENVT::_DEBUG);
            array_push($ret, $uneligne);
        }
        $result -> free();
        return $ret;
    }



    /* INSERT queries */
    function insertAsRest ($sql) {
       $link =  $this ->connect();
       $rc = $this->insert($link, $sql);
       $this ->close($link);
       return $rc;        
    }
    
    function insert ($link, $sql) {
        $this -> _logger ->DebugTrace("DBAccess::insert SQL[".$sql."]", ENVT::_DEBUG);

        $result = $link -> query ($sql);
        if ($result === FALSE) {
            $this -> _logger ->DebugTrace("DBAccess::insert error:".$link -> error, ENVT::_FATAL);
            return FALSE;
        }
        if ($result === TRUE) {
            /* returns the ID generated by a query (usually INSERT) on a table with a column having the AUTO_INCREMENT attribute.
             * If no INSERT or UPDATE statements were sent via this connection, or
             * if the modified table does not have a column with the AUTO_INCREMENT attribute,
             * this function will return zero.*/
            $this -> _logger ->DebugTrace("DBAccess::insert ID:".$link -> insert_id, ENVT::_DEBUG);
            $last_id = $link->insert_id;
            return $last_id;
        }
        return TRUE;
    }

        /* UPDATE queries */
    function update ($link, $sql) {
        return $this->_others($link, $sql, true);
    }

    function updateAsRest ($sql) {
        $link =  $this ->connect();
        $rc = $this-> update($link, $sql);
        $this ->close($link);
        return $rc;
    }

    function delete ($link, $sql) {
        return $this->_others($link, $sql, false);
    }

    function deleteAsRest ($sql) {
        $link =  $this ->connect();
        $rc = $this-> delete($link, $sql);
        $this ->close($link);
        return $rc;
    }

    
        /* others queries */
    private function _others ($link, $sql, $updateQuery) {
        if ($updateQuery)
            $this -> _logger ->DebugTrace("DBAccess::Upate SQL[".$sql."]", ENVT::_DEBUG);
        else
            $this -> _logger ->DebugTrace("DBAccess::Delete SQL[".$sql."]", ENVT::_DEBUG);

        $result = $link -> query ($sql);
        if ($result === FALSE) {
            if ($updateQuery)
                $this -> _logger ->DebugTrace("DBAccess::Update Error:".$link -> error, ENVT::_FATAL);
            else
                $this -> _logger ->DebugTrace("DBAccess::Delete Error:".$link -> error, ENVT::_FATAL);
            return FALSE;
        }
        return TRUE;
    }

}
